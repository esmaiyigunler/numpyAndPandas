#Pandas Ornekleri

import pandas as pd

# CSV dosyasını okuma
file_path = 'student_scores.csv'
df = pd.read_csv(file_path)

# Veri setinin genel bilgisi
print("Veri Seti Bilgisi:")
print(df.info())

# İlk 5 satırı görüntüleme
print("\nİlk 5 Satır:")
print(df.head())

# Temel istatistiksel bilgiler
print("\nTemel İstatistiksel Bilgiler:")
print(df.describe())

# Sınav notlarının ortalaması
average_scores = df['Scores'].mean()
print("\nSınav Notlarının Ortalaması:", average_scores)

####################################################################

import pandas as pd

# Çalışan performans verileri
data = {
    'Employee': ['John', 'Anna', 'Peter', 'Linda', 'Mike'],
    'Department': ['HR', 'IT', 'HR', 'IT', 'HR'],
    'Performance': [8, 7, 9, 6, 8]
}
df = pd.DataFrame(data)

# IT departmanındaki çalışanların performans ortalaması
it_avg_performance = df[df['Department'] == 'IT']['Performance'].mean()
print("IT Departmanındaki Çalışanların Performans Ortalaması:", it_avg_performance)

# Departman bazında performans ortalaması
department_avg_performance = df.groupby('Department')['Performance'].mean()
print("\nDepartman Bazında Performans Ortalaması:")
print(department_avg_performance)

##########################################################################################
import pandas as pd
import numpy as np

# Zaman serisi verisi oluşturma (örnek: günlük sıcaklık)

dates = pd.date_range(start='2023-01-01', periods=365)
temperature = np.random.randint(low=-5, high=30, size=365)

# DataFrame oluşturma
df = pd.DataFrame({'Date': dates, 'Temperature': temperature})

# Veri setinin genel bilgisi
print("Veri Seti Bilgisi:")
print(df.info())

# İlk 5 satırı görüntüleme
print("\nİlk 5 Satır:")
print(df.head())

# Ortalama, en yüksek ve en düşük sıcaklık
average_temperature = df['Temperature'].mean()
max_temperature = df['Temperature'].max()
min_temperature = df['Temperature'].min()

print("\nOrtalama Sıcaklık:", average_temperature)
print("En Yüksek Sıcaklık:", max_temperature)
print("En Düşük Sıcaklık:", min_temperature)

##############################################################################

import pandas as pd

# Şube günlük satış verileri
data = {
    'Branch': ['A', 'B', 'A', 'C', 'B', 'C'],
    'Date': ['2023-01-01', '2023-01-01', '2023-01-02', '2023-01-02', '2023-01-01', '2023-01-02'],
    'Sales': [1500, 2000, 1800, 2500, 2200, 1900]
}
df = pd.DataFrame(data)

# Şube bazında günlük ortalama satışları
daily_average_sales = df.groupby('Branch')['Sales'].mean()
print("Şube Bazında Günlük Ortalama Satışlar:")
print(daily_average_sales)

# Şube bazında toplam satış miktarları
total_sales_per_branch = df.groupby('Branch')['Sales'].sum()
print("\nŞube Bazında Toplam Satış Miktarları:")
print(total_sales_per_branch)

############################################################################################

import pandas as pd

# Departman 1 çalışan verileri
data1 = {
    'Employee': ['John', 'Anna', 'Peter'],
    'Department': ['HR', 'IT', 'HR'],
    'Salary': [60000, 80000, 70000]
}
df1 = pd.DataFrame(data1)

# Departman 2 çalışan verileri
data2 = {
    'Employee': ['Linda', 'Mike'],
    'Department': ['Finance', 'IT'],
    'Salary': [75000, 90000]
}
df2 = pd.DataFrame(data2)

# Tüm departmanların çalışan verilerini birleştirme
all_employees = pd.concat([df1, df2])
print("Tüm Çalışan Verileri:")
print(all_employees)

#########################################################################################

import pandas as pd

# Ürün verileri
data = {
    'Product': ['Laptop', 'Tablet', 'Phone', 'Desktop', 'Keyboard'],
    'Category': ['Electronics', 'Electronics', 'Electronics', 'Electronics', 'Accessories'],
    'Price': [1200, 500, 800, 1500, 50],
    'Stock': [50, 100, 80, 30, 200]
}
df = pd.DataFrame(data)

# Elektronik kategorisindeki ürünleri fiyata göre filtreleme ve sıralama
electronics_products = df[df['Category'] == 'Electronics'].sort_values(by='Price', ascending=False)
print("Elektronik Ürünler Fiyatına Göre Sıralı:")
print(electronics_products)

# Stok durumu düşük olan ürünleri filtreleme
low_stock_products = df[df['Stock'] < 50]
print("\nStok Durumu Düşük Ürünler:")
print(low_stock_products)

#############################################################################################################

import pandas as pd

# Örnek veri seti oluşturma
data = {
    'A': [1, 2, 3, 4, 5],
    'B': ['a', 'b', 'c', 'd', 'e']
}
df = pd.DataFrame(data)

# Veriyi ikiye bölmek
split_index = 3
df_part1 = df.loc[:split_index]
df_part2 = df.loc[split_index + 1:]

print("Bölüm 1:")
print(df_part1)
print("\nBölüm 2:")
print(df_part2)
##################################################

import pandas as pd

# Örnek veri seti oluşturma
data = {
    'Category': ['A', 'B', 'A', 'C', 'B', 'C'],
    'Value': [10, 20, 15, 25, 30, 35]
}
df = pd.DataFrame(data)

# Kategoriye göre veriyi gruplara ayırma
grouped = df.groupby('Category')

# Her bir gruptaki veriyi görüntüleme
for name, group in grouped:
    print(f"Kategori {name}:")
    print(group)
    
#################################################

import pandas as pd

# Örnek veri seti oluşturma
data = {
    'A': [1, 2, 3, 4, 5],
    'B': ['a', 'b', 'c', 'd', 'e']
}
df = pd.DataFrame(data)

# 'A' sütunundaki 3. satırın değerine erişim
value = df.loc[2, 'A']
print("3. satırın 'A' sütunundaki değer:", value)

# Belirli satırları ve sütunları seçme
subset = df.loc[1:3, ['A', 'B']]
print("\nBelirli satırlar ve sütunlar:")
print(subset)

####################################################

import pandas as pd

# Örnek veri seti oluşturma
data = {
    'A': [1, 2, 3, 4, 5],
    'B': ['a', 'b', 'c', 'd', 'e']
}
df = pd.DataFrame(data)

# İlk üç satır ve ilk iki sütunu seçme
subset = df.iloc[:3, :2]
print("İlk üç satır ve ilk iki sütun:")
print(subset)

# Belirli bir konumdan (2, 1) değere erişim
value = df.iloc[2, 1]
print("\n(2, 1) konumundaki değer:", value)
#######################################################

import pandas as pd

# Örnek veri seti oluşturma
data = {
    'Name': ['Alice', 'Bob', 'Charlie', 'David'],
    'Age': [25, 30, 35, 40],
    'City': ['New York', 'Los Angeles', 'Chicago', 'Houston']
}
df = pd.DataFrame(data)

# Yaşı 30'dan büyük olanları seçme ve City değerlerini güncelleme
df.loc[df['Age'] > 30, 'City'] = 'Unknown'

print("Güncellenmiş Veri Seti:")
print(df)





